#!/usr/bin/env perl

use warnings;
use strict;
# use diagnostics;
use Getopt::Long;
use File::Basename;
use Term::ANSIColor;
use Cwd;
use FindBin qw($Bin);
use lib "$Bin/../lib";
use POSIX qw(strftime);
use PiReT::Map;
use PiReT::Count;

$| = 1;
$ENV{PATH} = "$Bin:$ENV{PATH}";
$ENV{PERL5LIB}
    = "$Bin/../lib:$Bin/../ext/lib/perl5:$Bin/../ext/lib/perl5/auto:$ENV{PERL5LIB}";

# $ENV{PYTHONPATH}
#     = "$Bin/../thirdParty/miniconda/lib/python2.7/site-packages/:"
#     ."$ENV{PYTHONPATH}";

&checkDependedPrograms();

my $main_pid  = $$;
my $version   = "1";
my $time      = time();
my $scriptDir = "$Bin/../scripts";
my ($descriptfile, $splice_file_out, $pairfile, $diffdir,
    $workdir,      $numCPU,          $eukarya_fasta,,
    $index_ht2,    $gff_eukarya
);

#my $mapread='no';
$numCPU = 1;
my $memlim           = '20G';
my $rna_trimming_opt = 'yes';
my $rna_mapping_opt  = 'yes';
$gff_eukarya    = 'NONE';

#------------------------------------------------------------------------------#
GetOptions(

    'rna_mapping_opt=s'     => \$rna_mapping_opt,
    'rna_trimming_opt=s'    => \$rna_trimming_opt,
    'exp=s'                 => \$descriptfile,
    'd=s'                   => \$workdir,
    'cpu=i'                 => \$numCPU,
    'eukarya_fasta=s'       => \$eukarya_fasta,
    'index_ref_ht2=s'       => \$index_ht2,
    'h_vmem=s'              => \$memlim,
    'gff_eukarya=s'         => \$gff_eukarya,
    'help|?' => sub { &Usage() }
);

#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
if ( $eukarya_fasta eq 'NONE' )  { $eukarya_fasta  = ""; }
if ( $gff_eukarya eq 'NONE' )    { $gff_eukarya    = ""; }

#------------------------------------------------------------------------------#

my $start_time_string = &getTmpNameByTime;

#------------------------------------------------------------------------------#

$scriptDir    = Cwd::abs_path("$scriptDir");
$workdir      = Cwd::abs_path("$workdir");
$descriptfile = Cwd::abs_path("$descriptfile");

#------------------------------------------------------------------------------#

unless ( $descriptfile
    && $workdir
    && $gff_eukarya
    && $eukarya_fasta
    && $index_ht2 )
{
    &Usage;
}

#------------------------------------------------------------------------------#

# creates a working directory
unless ( -d "$workdir" ) {
    mkdir "$workdir", 0777
        or die "failed: failed: can not make dir  $workdir $!";
}

#------------------------------------------------------------------------------#

# process log file
my $process_log_file = "$workdir/process.log";
# error log file
my $error_log_file = "$workdir/error.log";
open( my $LOG, ">", $process_log_file )
    or die "failed: failed to write $process_log_file\n$!";
open( STDERR, '>&', STDOUT )
    or die "failed: failed: Can't redirect stderr: $!";
open( STDERR, '>', $error_log_file )
    or die "FAILED: Can't redirect stderr: $!";

#------------------------------------------------------------------------------#

my %description;
my @colname;
my %expdescription;
my %allsample;
my @allsample;
my %pairs;
my %allrawreads1;
my %allrawreads2;
my @out_gtfs;
my $mapDir;

#------------------------------------------------------------------------------#

&lprint("[Checking Experimental Design File]\n Running\n\n");

#------------------------------------------------------------------------------#
# parse experimental design file
open( my $IN, '<', "$descriptfile" )
    or die "FAILED: cannot open $descriptfile $!";
my $linenum = 0;
while (<$IN>) {
    chomp;
    my @line = split /\s+/, $_;
    unless ( $#line >= 2 ) {
        &lprint("check format of the description file $_ \n");
        exit;
    }
    $linenum++;
    if ( $linenum == 1 ) {
        for ( my $i = 0; $i <= $#line; $i++ ) {
            $line[$i] =~ s/\s+//g;
            $colname[$i] = $line[$i];
        }
    }
    if ( $linenum > 1 ) {
        $allsample{ $line[0] } = 1;
        push @allsample, $line[0];
        for ( my $i = 3; $i <= $#line; $i++ ) {
            $line[$i] =~ s/\s+//g;
            $expdescription{ $line[0] }{ $colname[$i] } = $line[$i];
        }

        my @line1 = split /;/, $line[1];

        for ( my $ill = 0; $ill <= $#line1; $ill++ ) {
            my @rawreadsfile = split /:/, $line1[$ill];

            push @{ $allrawreads1{ $line[0] } }, $rawreadsfile[0];
            push @{ $allrawreads2{ $line[0] } }, $rawreadsfile[1];

            for ( my $il = 0; $il <= $#rawreadsfile; $il++ ) {
                my $tmpreads = $rawreadsfile[$il];
                if ( &file_check($tmpreads) < 0 ) {
                    die "failed: The reads file $_ doesn't exist or empty.\n";
                }
                $rawreadsfile[$il] = $tmpreads;
            }
            $line1[$ill] = join ':', @rawreadsfile;
        }

        $description{ $line[0] }{group} = $line[2];
        push @{ $pairs{ $line[2] } }, $line[0];
        if ( $line[2] =~ /\s+/ ) {
            &lprint(
                "FAILED: please check format of experimental descpition \n group name can not have space as : $line[2]\n"
            );
            exit;
        }
        my $rawreadsline = $line1[0];
        for ( my $i = 1; $i <= $#line1; $i++ ) {
            $rawreadsline = $rawreadsline . '---ppp---' . $line1[$i];
        }
        $description{ $line[0] }{Rawreads_file} = $rawreadsline;
    }
}
close IN;

#------------------------------------------------------------------------------#


&lprint("[Checking Experimental Design File]\n Finished\n\n");

#------------------------------------------------------------------------------#

my ( @eukaryagff, %allgff );
my %allcontigs;

#------------------------------------------------------------------------------#

&lprint(
    "[Copying and creating indices of reference fasta files]\n Running\n\n");

#------------------------------------------------------------------------------#

if ($eukarya_fasta) {
    if ( &file_check($eukarya_fasta) < 0 ) {
        die
            "FAILED: $eukarya_fasta doesn't exist or empty.\n";
    }
    else {
        if ( -e "$workdir/eukarya.fa" ) { `rm $workdir/eukarya.fa`; }
        `cp $eukarya_fasta $workdir/eukarya.fa`;
        #`ln -fs $eukarya_fasta $workdir/eukarya.fa`;
        # check if the index file exists, do not run, if it already exists
        if ( &file_check("$workdir/eukarya.fa.fai") < 0 ) {
            `samtools faidx $workdir/eukarya.fa`;
        }
        my @contigs = &readfai("$workdir/eukarya.fa.fai");
        foreach (@contigs) { $allcontigs{$_}++; }
    }
}

#------------------------------------------------------------------------------#
&lprint(
    "[Copying and creating indices of reference fasta files]\n Finished\n\n");

#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
&lprint(
    "[Making sure if sequences in references are not named the same]\n Running\n\n"
);

#------------------------------------------------------------------------------#

foreach ( keys %allcontigs ) {
    if ( $allcontigs{$_} > 1 ) {
        &lprint(
            "contig name $_ is duplicated, please make sure the name of contigs"
            ."is unique in reference fasta files (prokaryout and eukarya references)\n"
        );
        exit;
    }
}

#------------------------------------------------------------------------------#
&lprint(
    "[Making sure if sequences in references are not named the same]\n Finished\n\n"
);

#------------------------------------------------------------------------------#
&lprint("[parsing gff files]\n Running\n\n");
#------------------------------------------------------------------------------#

my @tmpgff = split /,/, $gff_eukarya;

foreach (@tmpgff) {
    my $tmpgff = $_;
    my @tmpeukarya = split '/', $tmpgff;
    $tmpeukarya[-1] =~ s/\.//g;
    $tmpeukarya[-1] =~ s/gff//g;
    if ( &file_check($tmpgff) < 0 ) {
        next &lprint(
            "FAILED: The $tmpgff doesn't exist or empty.\n");
        exit;
    }
    push @{ $allgff{eukarya} }, $tmpeukarya[-1];

    if ( &file_check( "$workdir/eukarya.gtf" ) > 0 ) {
        &lprint( "\n Found $workdir/eukarya.gtf\n" );
    }

    else {
        system(
            "perl $scriptDir/parse_eukarya_gfffile.pl "
            ."$tmpgff $workdir/ $workdir/eukarya.fa.fai"
            ) == 0
            || die
            "\nFAILED: while running parse_eukarya_gfffile.pl\n";
        &lprint(
            "perl $scriptDir/parse_eukarya_gfffile.pl $tmpgff $workdir/ $workdir/eukarya.fa.fai \n"
        );
    }

    if (&file_check("$workdir/splice_sites_gff.txt") > 0){
        &lprint("\n $workdir/splice_sites_gff.txt is found\n");
    }
    else {
        system(
            "python $scriptDir/hisat2_extract_splice_sites.py"
            ." $workdir/eukarya.gtf > $workdir/splice_sites_gff.txt") == 0
            || die
            "\nFAILED: while running hisat2_extract_splice_sites.py\n";
        &lprint("\npython $scriptDir/hisat2_extract_splice_sites.py"
                ."$workdir/eukarya.gtf > $workdir/splice_sites_gff.txt \n");}
}

#------------------------------------------------------------------------------#
&lprint("[Parsing gff files]\n Finished\n\n");

#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
&lprint("[Creating Hisat2 Index files]\n Running\n\n");

#TODO: Is .5 enough to check the status?
my $checkIndexFile = join "", ( $index_ht2, '.5.ht2l' );
unless ( -s $checkIndexFile ) {
    if ($eukarya_fasta) {
        Map::createHisatIndex(
            f1 => $eukarya_fasta,
            numCPU => $numCPU,
            out_index => $index_ht2);
    }
    else { &lprint("FAILED: no INDEX files\n"); exit; }
}

if   ( -s $checkIndexFile ) { &lprint("INDEX file $index_ht2 created\n"); }
else                        { &lprint("failed: INDEX $index_ht2\n"); exit; }

#------------------------------------------------------------------------------#
&lprint("[Creating Hisat2 index files]\n Finished\n\n");

#------------------------------------------------------------------------------#
my $time1 = time();
&lprint("[Trimming Reads]\n\tRunning \n\n");

foreach ( sort keys %description ) {
    my $sample   = $_;
    my $rawreads = $description{$sample}{Rawreads_file};
    $rawreads =~ s/---ppp---/ /g;
    $rawreads =~ s/:/ /g;
    # my $jobname   = join '.', ( $sample, 'RNA_analyis' );
    my $indexFile = $index_ht2;
    my $sampleDir = join '/', ( $workdir, "$sample" );
    mkdir $sampleDir if ( !-e $sampleDir );
    if ( !-e $sampleDir ) { print "cannot make dir $sampleDir\n"; }
    my $troutDir = join '/', ( $sampleDir, 'trimming_results' );
    mkdir $troutDir if ( !-e $troutDir );
    if ( !-e $troutDir ) { print "cannot make dir $troutDir\n"; }

    if ( &file_check("$workdir/$sample/trimming_results/$sample.stats.txt")
        > 0 )
    {
        &lprint(
            "\n $workdir/$sample/trimming_results/$sample.stats.txt is found\n, QC was already done\n"
        );
    }
    else {
        print
            "perl $scriptDir/illumina_fastq_QC.pl -min_L 60 -n 5 -q 15 -lc 0.7 -t $numCPU -prefix $sample -d $workdir/$sample/trimming_results/ -p  $rawreads";
        system(
            "perl $scriptDir/illumina_fastq_QC.pl -min_L 60 -n 5 -q 15 -lc 0.7 -t $numCPU -prefix $sample -d $workdir/$sample/trimming_results/ -p  $rawreads"
            ) == 0
            || die
            "\nAn error occured while processing $sample, illumina_fastq_QC.pl\n";
        &lprint(
            "perl $scriptDir/illumina_fastq_QC.pl  -min_L 60 -n 5 -q 15  -lc 0.7  -t $numCPU  -prefix $sample  -d  $workdir/$sample/trimming_results/ -p  $rawreads\n"
        );
    }

    &lprint("[Mapping Reads]\n\tRunning \n\n");

    my $mapDir = join '/', ( $sampleDir, 'mapping_results' );
    mkdir $mapDir if ( !-e $mapDir );
    if ( !-e $mapDir ) { print "cannot make dir $mapDir\n"; }

    my $pairedRead1fastq = join '/', ( $troutDir, "$sample.1.trimmed.fastq" );
    my $pairedRead2fastq = join '/', ( $troutDir, "$sample.2.trimmed.fastq" );
    my $splice_file      = join '/',
        ( $workdir, "differential_gene", "eukarya", "splice_sites_gff.txt" );
    my $gff_file = join '/', ( $workdir, "eukarya.gff" );
    
    if ( &file_check("$workdir/$sample/mapping_results/mapped.log")
        > 0 ){
        &lprint("\n[Mapping was already done for $sample]\n");
    }
    else {
        Map::runMapping(
            r1             => $pairedRead1fastq,
            r2             => $pairedRead2fastq,
            hisat2options  => "--fast",
            IndexFile      => $indexFile,
            numCPU         => $numCPU,
            splicesite     => $splice_file,
            outsam         => "$mapDir/mapped.sam",
            mappingLogFile => "$mapDir/mapped.log"
        );
    }

    &lprint("[Mapping Reads]\n\tFininshed \n\n");

    &lprint("[Quantifying transcripts]\n\tRunning \n\n");

    Map::orderSAM(
        sam_file => "$mapDir/mapped.sam",
        bam_file => "$mapDir/$sample.alns.sorted.bam");

    Count::stringtie(
        out_summary_gtf  => "$mapDir/$sample.summary.gtf",
        gff              => "$gff_file",
        out_coverage_gtf => "$mapDir/$sample"."_full_coverage.gtf",
        out_abun_tab     => "$mapDir/$sample"."_gene_abundance.tab",
        sample           => "$sample",
        in_bam           => "$mapDir/$sample.alns.sorted.bam"
    );

    push @out_gtfs, "$mapDir/$sample.summary.gtf";

    &lprint("[Quantifying transcripts]\n\tFinished \n\n");
    
}

#------------------------------------------------------------------------------#
my $gff_file = join '/', ( $workdir, "eukarya.gff" );
my $all_gtf = join(" ", @out_gtfs);
system("stringtie --merge -G $gff_file $all_gtf -o $workdir/merged.gtf");
&lprint("\nstringtie --merge -G $gff_file $all_gtf -o $workdir/merged.gtf\n");

#------------------------------------------------------------------------------#
my $merged_gtfs = "$workdir/merged_gtfs";
mkdir $merged_gtfs if ( !-e $merged_gtfs );
if ( !-e $merged_gtfs ) { print "cannot make dir $merged_gtfs\n"; }
foreach ( sort keys %description ) {
    my $samp = $_;
    system("mkdir -p $merged_gtfs/$samp");
    my $stringtieEB = "stringtie -e -B "
                     ."$workdir/$samp/mapping_results/$samp.alns.sorted.bam "
                    ."-l $samp -G $workdir/merged.gtf "
                    ."-o $merged_gtfs/$samp/$samp.merged.gtf";

    Map::executeCommand("$stringtieEB");
}

&printRunTime($time1);
&lprint("\n Done Trimming and Quantifying Reads \n");
#------------------------------------------------------------------------------#
my $merge_command="python $scriptDir/merge_abund_file.py -W $workdir";
Map::executeCommand("$merge_command");
#------------------------------------------------------------------------------#

&lprint("\n\n [All Done] \n\n");

sub Usage {

    print <<"END";
 
 Usage: runPiReT-OME [options] [-exp <exp_descriptfile.txt>] [-d <workdir>] 
        [-eukarya_fasta <eukarya.fa>] [-index_ref_ht2 <indexfile>]
        [-h_vmem <memory>] [-cpu <numCPU>]

  example: 
                       
    runPiReT-OME -exp test_experimental_design.txt -d pipeline_test_euk 
    -eukarya_fasta data/eukarya_test.fa -index_ref_ht2 test_index 
    -gff_eukarya data/eukarya_test.gff3

 
    -d <string>, working directory where the whole project will be under, must have permission to write. 
    -gff_eukarya <string>, absolute path, eukarya annotation file in gff format, multiple files seperated by comma, needed for diffrential gene analysis (contigs must be in  mapping reference with the same names)  (optional) 
    -eukarya_fasta  eukarya nucleotide sequence in fasta format (for making hisat2 mapping index file)
    -index_ref_ht2:     string, absolute path, hisat2 mapping #ndex file,  single file that already exists or you want generated from ref sequences for both eukarya and prokaryote fasta. (must have written permission).
    -h_vmem: memory limit per node, string, default 20G
    -cpu          number of cpu to be used (default 1)
    -exp         tab delimited txt file descripting experiments that each row represents one sample.
                      Each colomum is as:
                    (
                     ID:  uniq sample ID
                     Rawreads_file: absolute path, fastq format, pair reads seperated by colon, multiple datasets seprarate semicolon
                     group:    replicates group name for this project, each group must have uniqe name (without -pair_comparison option defined as below, all groups will be compared to each other in differential gene analysis)
                     experimental condisitons such as clock time, CFU etc:  one condition per name per colomumm, can be multiple colomums, (for differentail gene analysis)
                     
                      Example: (the names and order of the first 3 colomums must be the exact the same as below) :  
                      ID            Rawreads_files/BAM_file                      group 
                      exp1      read1p1:read1p2;read1p1a:read1p2a       time0
                      exp2      read2p1:read2p2                         time0
                      .
                      .
                      .
                      exp21     read21p1:read21p2;read21p1a:read21p2a   timef
                      exp22     read22p1:read22p2;read22p1a:read22p2a   timef                              
                    )
                                 
END
    exit;
}

sub file_check {

    #check file exist and non zero size
    my $file  = shift;
    my $exist = -1;
    if ( -e $file ) { $exist = 1 }
    if ( -z $file ) { $exist = -1 }
    return $exist;
}

sub getTmpNameByTime {
    my $now_string = strftime "%Y %b %e %H:%M:%S", localtime;
    return $now_string;
}

sub printRunTime {
    my $time        = shift;
    my $runTime     = time() - $time;
    my $time_string = sprintf(
        " Running time: %02d:%02d:%02d\n\n",
        int( $runTime / 3600 ),
        int( ( $runTime % 3600 ) / 60 ),
        int( $runTime % 60 )
    );
    &lprint($time_string);

    # Also print to screen
    print $time_string;
}

sub lprint {
    my ($line) = @_;
    print $LOG $line;
    print $line;
}

sub readfai {
    my $faifile = shift;
    my @tmpcontigs;
    open( my $IN, '<' ,$faifile ) or die "failed: can not open $faifile $!";
    while (<$IN>) {
        chomp;
        my $line = $_;
        my @line = split /\t+/, $line;
        push @tmpcontigs, $line[0];
    }
    close IN;
    return @tmpcontigs;
}

sub checkDependedPrograms

    #TODO: Also check for appropriate version

{
    system("which samtools 1>/dev/null") == 0
        || die "\nsamtools is not in your PATH\n $ENV{PATH}\n";
    system("which hisat2-build 1>/dev/null") == 0
        || die "\nhisat2-build is not in your PATH\n $ENV{PATH}\n";
    system("which hisat2 1>/dev/null") == 0
        || die "\nhisat2 is not in your PATH\n $ENV{PATH}\n";
    system("which perl 1>/dev/null") == 0
        || die "\nperl is not in your PATH\n $ENV{PATH}\n";
    system("which gffread 1>/dev/null") == 0
        || die "\ngffread is not in your PATH\n $ENV{PATH}\n";
    system("which stringtie 1>/dev/null") == 0
        || die "\nstringtie is not in your PATH\n $ENV{PATH}\n";
}
